---
- name: "Hyprland | Checking for Distribution Config: {{ ansible_distribution }}"
  ansible.builtin.stat:
    path: "{{ role_path }}/tasks/{{ ansible_distribution }}.yml"
  register: hyprland_distribution_config

- name: "Hyprland | Run Tasks: {{ ansible_distribution }}"
  ansible.builtin.include_tasks:
    file: "{{ ansible_distribution }}.yml"
  when: hyprland_distribution_config.stat.exists

- name: Configure hyprland
  block:
    - name: "Hyprland | Sync configuration files"
      ansible.posix.synchronize:
        mode: push
        src: "{{ item.src }}"
        dest: "{{ ansible_user_dir }}/{{ item.dest }}"
        recursive: yes
      loop:
        - { src: 'hypr', dest: '.config/' }
        - { src: 'hypr/scripts', dest: '.config/hypr/' }

    - name: "Hyprland | Get GPUs"
      ansible.builtin.shell: set -o pipefail && lspci | grep -i 'VGA\|3D\|display'
      register: gpu_result
      changed_when: no

    - name: "Hyprland | Nvidia GPU Detection"
      set_fact:
        has_nvidia: "{{ 'nvidia' in gpu_result.stdout.lower() }}"

    - name: "Hyprland | VM Detection"
      set_fact:
        is_vm: "{{ ansible_facts.virtualization_role is defined and ansible_facts.virtualization_role != 'host' }}"

    - name: "Hyprland | Update configuration templates"
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ ansible_user_dir }}/.config/hypr/{{ item.dest }}"
        backup: no
        owner: "{{ user }}"
        group: "{{ user }}"
      become: true
      loop:
        - { src: 'autostart.conf.j2', dest: 'config/autostart.conf' }
        - { src: 'env_default.conf.j2', dest: 'config/environments/default.conf' }
        - { src: 'environment.conf.j2', dest: 'config/environment.conf' }
        - { src: 'hyprlock.conf.j2', dest: 'hyprlock.conf' }

- name: Manage Hyprland dynamic cursors
  block:
    - name: "Hyprland | Update hyprpm package list"
      command: hyprpm update
      when: system.hyprland.plugins.enabled
      changed_when: no

    - name: "Hyprland | Add plugin repos"
      ansible.builtin.shell:
        cmd: "yes | hyprpm add {{ item }}"
      loop: "{{ system.hyprland.plugins.list }}"
      ignore_errors: yes
      when: system.hyprland.plugins.enabled and system.hyprland.plugins.list is defined
      changed_when: no

    - name: "Hyprland | Gather the names of installed plugins"
      ansible.builtin.shell:
        cmd: "hyprpm list | grep Plugin | sed 's/.* //'"
      ignore_errors: yes
      register: installed_hypr_packages
      when: system.hyprland.plugins.enabled
      changed_when: no

    - name: "Hyprland | Print the names of the detected packages"
      ansible.builtin.debug:
        var: installed_hypr_packages.stdout_lines
      when: system.hyprland.plugins.enabled and installed_hypr_packages.stdout_lines is defined

    - name: "Hyprland | Enable all installed plugins"
      ansible.builtin.command:
        cmd: "hyprpm enable {{ item }}"
      loop: "{{ installed_hypr_packages.stdout_lines }}"
      ignore_errors: yes
      when: system.hyprland.plugins.enabled and installed_hypr_packages.stdout_lines is defined
      changed_when: no
